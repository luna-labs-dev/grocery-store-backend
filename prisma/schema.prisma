generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model family {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @unique @db.VarChar(100)
  ownerId         String           @unique @db.Uuid
  description     String?          @db.Text
  inviteCode      String?          @unique @db.VarChar(320)
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  createdBy       String           @db.VarChar(320)
  shopping_events shopping_event[]
  owner           user             @relation("familyOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  members         user[]           @relation("FamilyMembers")
}

model user {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firebaseId  String  @unique @db.VarChar(320)
  email       String  @unique @db.VarChar(320)
  familyId    String? @db.Uuid
  family      family? @relation("FamilyMembers", fields: [familyId], references: [id])
  ownedFamily family? @relation("familyOwner")
}

model market {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String           @unique @db.VarChar(60)
  name           String           @unique @db.VarChar(100)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  createdBy      String           @db.VarChar(320)
  shopping_event shopping_event[]
}

model shopping_event {
  id             String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  familyId       String                  @db.Uuid
  marketId       String                  @db.Uuid
  description    String?                 @db.Text
  totalPaid      Decimal                 @db.Money
  wholesaleTotal Decimal                 @db.Money
  retailTotal    Decimal                 @db.Money
  status         shoppingEventStatusEnum @default(ONGOING)
  elapsedTime    Int?
  createdAt      DateTime                @default(now()) @db.Timestamp(6)
  finishedAt     DateTime?               @db.Timestamp(6)
  createdBy      String                  @db.VarChar(320)
  market         market                  @relation(fields: [marketId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shopping_event_marketId_market_id_fk")
  product        product[]
  family         family                  @relation(fields: [familyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shopping_event_familyId_family_id_fk")
}

model product {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shoppingEventId    String         @db.Uuid
  name               String         @db.VarChar(256)
  amount             Int            @db.Integer
  price              Decimal        @db.Money
  wholesaleMinAmount Int?           @db.Integer
  wholesalePrice     Decimal?       @db.Money
  addedAt            DateTime       @db.Timestamp(6)
  addedBy            String         @db.VarChar(320)
  shoppingEvent      shopping_event @relation(fields: [shoppingEventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_shoppingEventId_shopping_event_id_fk")
}

enum shoppingEventStatusEnum {
  ONGOING
  CANCELED
  FINISHED
}
